#!/usr/bin/env python3
# -*- coding: utf-8; mode: python -*-
# pylint: disable=C0103,R0914
u"""
    linux-db2rst
    ~~~~~~~~~~~~

    Command line to convert DocBook-XML books from the Linux kernel to reST.

    :copyright:  Copyright (C) 2016  Markus Heiser
    :license:    GPL V3.0, see LICENSE for details.
"""

# ==============================================================================
# imports
# ==============================================================================

import dbxml2rst.helper
from dbxml2rst.helper import CLI, LOG
from dbxml2rst.nodes import (
    XMLTag, subTemplate, subEntities, INT_ENTITES, filterXML )

from dbxml2rst.pandoc import (
    PANDOC_EXE, xml2json, jsonFilter, json2rst, fixPandocRST )

from dbxml2rst.hooks import (
    hook_chunk_by_tag, hook_copy_file_resource, hook_html2db_table
    , hook_drop_usless_informaltables, hook_flatten_tables
    , RESOUCE_FORMAT )

from fspath import FSPath

import media

# ==============================================================================
# setup
# ==============================================================================

CACHE = FSPath(__file__).DIRNAME / "cache"
LINUX_DOCBOOK_ROOT = None
MIGRATION_FOLDER   = None

def setup_globals(cliArgs):
    global LINUX_DOCBOOK_ROOT, MIGRATION_FOLDER  # pylint: disable=W0603

    LINUX_DOCBOOK_ROOT = FSPath(cliArgs.linux_src_tree) / "Documentation/DocBook"
    MIGRATION_FOLDER   = FSPath(cliArgs.out_folder)

    media.LINUX_TV_CACHE     = CACHE / "linux_tv"
    media.LINUX_TV_BOOK      = MIGRATION_FOLDER / "linux_tv"
    media.LINUX_DOCBOOK_ROOT = LINUX_DOCBOOK_ROOT
    media.init_globals()

dbxml2rst.helper.mainFOOTER="""

.. only:: html

  Retrieval
  =========

  * :ref:`genindex`

.. todolist::

"""

dbxml2rst.helper.rstHEADER=""".. -*- coding: utf-8; mode: rst -*-
"""

dbxml2rst.helper.rstFOOTER="""

.. ------------------------------------------------------------------------------
.. This file was automatically converted from DocBook-XML with the dbxml
.. library (https://github.com/return42/dbxml2rst). The origin XML comes
.. from the linux kernel:
..
..   http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git
.. ------------------------------------------------------------------------------
"""

# ==============================================================================
def main():
# ==============================================================================

    # pylint: disable=W0612

    cli = CLI(description="Tools to convert DocBook-XML books from the Linux kernel to reST")

    cli.add_argument(
        "--noconvert", action = 'store_true'
        , help = "don't 'convert xml2rst within the cache" )

    cli.add_argument(
        "--noinstall", action = 'store_true'
        , help = "don't install converted files" )

    cli.add_argument(
        "--out-folder"
        , type = FSPath
        , default = FSPath("out")
        , help = "path to place reST output" )

    # db2rst
    # ------

    cmd = cli.addCMDParser(db2rst)

    cmd.add_argument(
        "linux_src_tree"
        , type = FSPath
        , help = "path to linux kernel source tree" )

    cmd.add_argument(
        "filename", nargs="+"
        , help="DocBook-XML template file (e.g 'kernel-hacking.tmpl')")

    # media2rst
    # ---------

    cmd = cli.addCMDParser(media2rst)
    cmd.add_argument(
        "--noinit", action = 'store_true'
        , help = "don't 'init the cache" )

    cmd.add_argument(
        "linux_src_tree"
        , type = FSPath
        , help = "path to linux kernel source tree" )

    # all
    # ---------

    cmd = cli.addCMDParser(all2rst)
    cmd.add_argument(
        "linux_src_tree"
        , type = FSPath
        , help = "path to linux kernel source tree" )

    # fiddle
    # ------

    cmd = cli.addCMDParser(fiddle)
    cmd.add_argument(
        "filename", nargs="?", default="media_api.xml_entity"
        , help="filename of the file for testing")

    cli()

# ==============================================================================
def all2rst(cliArgs):                                    # pylint: disable=W0613
# ==============================================================================

    u"""Convert all Linux DocBook documentation to reST."""

    setup_globals(cliArgs)
    for fname in LINUX_DOCBOOK_ROOT.glob("*.tmpl"):
        origFile = fname.BASENAME
        if origFile not in ["media_api.tmpl", "media-entities.tmpl", "media-indices.tmpl"]:
            _db2rst(cliArgs, origFile.BASENAME)
    cliArgs.noinit = False
    media2rst(cliArgs)


# ==============================================================================
def db2rst(cliArgs):                                    # pylint: disable=W0613
# ==============================================================================

    u"""Convert DocBook documentation to reST."""

    setup_globals(cliArgs)
    for fname in cliArgs.filename:
        origFile = FSPath(fname)
        _db2rst(cliArgs, origFile)


# ==============================================================================
def _db2rst(cliArgs, origFile):                          # pylint: disable=W0613
# ==============================================================================

    hook_list = [
        hook_chunk_by_tag("book", "part", "chapter", ".//refentry")
        , hook_copy_file_resource(LINUX_DOCBOOK_ROOT)
        , hook_html2db_table
        , hook_drop_usless_informaltables
        #, hook_fix_broken_tables(fname_list=["kernel-locking/cheatsheet", ])
        , hook_flatten_tables()
    ]

    folder = CACHE / origFile.SKIPSUFFIX

    LOG.msg("==== convert DocBook-XML %s to reST ====" % (origFile))

    if folder.EXISTS:
        folder.rmtree()
    folder.makedirs()

    # create a copy of the tmpl file
    tmplFile  = origFile.suffix(".tmpl_orig")
    mainFile = FSPath("index.xml_orig")
    (LINUX_DOCBOOK_ROOT/origFile).copyfile(folder/tmplFile)
    subTemplate(folder/tmplFile, folder/mainFile)


    #outFile  = mainFile.suffix(".xml_orig")
    #(LINUX_DOCBOOK_ROOT/origFile).copyfile(folder/outFile)

    inFile  = mainFile
    outFile = mainFile.suffix(".xml_entity")

    LOG.info("substitude entities ...")
    subEntities(folder/inFile, folder/outFile, None, INT_ENTITES)

    inFile  = outFile
    outFile = outFile.suffix(".xml")

    LOG.info("run XML filter: %s --> %s" % (inFile, outFile))

    # XML-filter
    xmlFilter = XMLTag()
    for hook in hook_list:
        xmlFilter.parseData.hooks.append(hook)

    filterXML(folder, inFile, outFile
              , xmlFilter     = xmlFilter
              , parseIncludes = True )

    # after chunking, we have a filelist ...
    fileList = [f.BASENAME for f in folder.reMatchFind(".*\\.xml$") ]

    if not cliArgs.noconvert:

        LOG.info("using %s to convert" % PANDOC_EXE)
        LOG.info("\nconvert within folder: %s" % folder)
        for inFile in fileList:
            LOG.info("::convert file:: %s" % inFile)
            convert_xml2rst(folder, inFile)

    # add footer to main reST file
    reSTRoot = folder/mainFile.suffix(".rst")
    with reSTRoot.openTextFile(mode="a") as f:
        f.write(dbxml2rst.helper.mainFOOTER)

    if not cliArgs.noinstall:

        bookFolder = MIGRATION_FOLDER / origFile.BASENAME.SKIPSUFFIX
        if bookFolder.EXISTS:
            for name in bookFolder.reMatchFind("[^(conf.py)]"):
                name.delete()
        else:
            bookFolder.makedirs()

        for xmlFile in fileList:
            rstFile = xmlFile.suffix(".rst")
            src = folder/ rstFile
            dst = bookFolder / rstFile
            LOG.msg("install file %s" % dst)
            resource = FSPath(RESOUCE_FORMAT % src.SKIPSUFFIX)

            dst.DIRNAME.makedirs()
            src.copyfile(dst)

            if resource.EXISTS:
                dstFolder = dst.DIRNAME / folder.BASENAME
                LOG.msg("install file-folder %s" % dstFolder)
                resource.copytree(dstFolder)


# ==============================================================================
def media2rst(cliArgs):                                  # pylint: disable=W0613
# ==============================================================================

    u"""convert *media* (linux_tv) DocBook documentation to reST.

    This is an attempt to convert the media (linux_tv) documentation -- written
    in DocBook markup -- to reST.

    Every *media* xml fragment is copied to the cache folder where the converion
    steps are applied on it.  """

    setup_globals(cliArgs)

    LOG.msg("==== convert DocBook-XML media (linux-tv) to reST ====")

    if not cliArgs.noinit:
        media.initMedia()

    if not cliArgs.noconvert:
        # convert files
        LOG.info("using %s to convert" % PANDOC_EXE)
        LOG.info("convert within folder: %s" % media.LINUX_TV_CACHE)

        fileList = media.getFileList()
        inFileList = [ f.suffix(".xml") for f in fileList ]
        for inFile in inFileList:
            LOG.msg("convert file: %s" % inFile)
            convert_xml2rst(media.LINUX_TV_CACHE, inFile)

    # add footer to main reST file
    reSTRoot = media.LINUX_TV_CACHE/"media_api.rst"
    with reSTRoot.openTextFile(mode="a") as f:
        f.write(dbxml2rst.helper.mainFOOTER)

    if not cliArgs.noinstall:
        media.installMedia()


# ==============================================================================
def fiddle(cliArgs):                                     # pylint: disable=W0613
# ==============================================================================

    u"""Implement some stuff and yust fiddle a bit with it."""

    global LINUX_DOCBOOK_ROOT # pylint: disable=W0603
    LINUX_DOCBOOK_ROOT = FSPath(cliArgs.linux_src_tree) / LINUX_DOCBOOK_ROOT

    raise NotImplementedError("You have not yet implemented any stuff to fiddle with.")

    # Example: fiddle with media files / you have to run::
    #
    #     media2rst --noinstall --noconvert
    #
    # before you can work on media files.

    # pylint: disable=W0101
    inFile = FSPath(cliArgs.filename)
    outFile = inFile.suffix(".xml")
    LOG.msg("run XML filter (mainFile) : %s --> %s" % (inFile, outFile))
    filterXML(media.LINUX_TV_CACHE, inFile, outFile
              , media.getMediaFilter()
              , parseIncludes = False)

    inFile = outFile
    LOG.info("\n::convert file:: %s" % inFile)
    convert_xml2rst(media.LINUX_TV_CACHE, inFile)


# ==============================================================================
def convert_xml2rst(folder, inFile):
# ==============================================================================

    u"""Convert a xml fragment to reST.

    :param str folder: Root-folder where conversion takes place.
    :param str inFile: Preprocess XML file.

    Description of the conversion steps:

    * convert to json-AST
    * apply json-filters
    * convert json to reST
    * apply pandoc reST bugfixes
    """

    folder  = FSPath(folder)

    outFile = inFile.suffix(".json_pre")
    LOG.info("convert xml --> json : %s" % outFile)
    xml2json(folder / inFile, folder / outFile, stdout = None, stderr=None)

    inFile, outFile  = outFile, outFile.suffix(".json")
    LOG.info("json / pandoc filter: %s" % outFile)
    jsonFilter(folder / inFile, folder / outFile, XMLTag.pandocFilter)

    inFile, outFile  = outFile, outFile.suffix(".rst_pre")
    LOG.info("convert json --> rst: %s" % outFile)
    json2rst(folder / inFile, folder / outFile, stdout = None, stderr=None)

    inFile, outFile = outFile, outFile.suffix(".rst")
    LOG.info("fix pandoc's rst: %s" % outFile)
    fixPandocRST(folder / inFile, folder / outFile)


# ==============================================================================
# run ...
# ==============================================================================

if __name__ == "__main__":
    main()
